// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int          @id @default(autoincrement())
  uuid                    String       @unique @db.VarChar(255)
  name                    String       @db.VarChar(255)
  email                   String       @unique @db.VarChar(255)
  password                String       @db.VarChar(255)
  title                   String       @db.VarChar(255)
  phone_number            String       @unique @db.VarChar(20)
  description             String       @db.VarChar(1000)
  id_file                 Int
  created_at              DateTime     @default(now())
  updated_at              DateTime     @default(now())
  file                    File         @relation(fields: [id_file], references: [id])
  content                 Content[]
  redeem                  UserRedeem[]
  forum                   Forum[]
  like_from_id_user       Like[]       @relation("fk_id_user")
  like_from_id_creator    Like[]       @relation("fk_id_creator")
  comment_from_id_user    Comment[]    @relation("fk_id_creator_comment")
  comment_from_id_creator Comment[]    @relation("fk_id_user_comment")
}

model Content {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(1000)
  highlight  String    @db.VarChar(1200)
  body       String    @db.VarChar(10000)
  id_creator Int
  id_photo   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  viewers    Viewers[]
  user       User      @relation(fields: [id_creator], references: [id], onDelete: NoAction)
  file       File      @relation(fields: [id_photo], references: [id])
}

model Viewers {
  id         Int     @id @default(autoincrement())
  id_content Int
  ip_address String  @db.VarChar(225)
  content    Content @relation(fields: [id_content], references: [id])
}

model Forum {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(1000)
  body       String    @db.VarChar(10000)
  id_file    Int
  id_creator Int
  like       Like[]
  comment    Comment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  user       User      @relation(fields: [id_creator], references: [id])
}

model Like {
  id         Int
  id_creator Int
  id_user    Int
  forum      Forum @relation(fields: [id], references: [id], onDelete: Cascade)
  user       User  @relation("fk_id_user", fields: [id_user], references: [id])
  creator    User  @relation("fk_id_creator", fields: [id_creator], references: [id])

  @@id([id, id_user])
}

model Comment {
  id         Int      @id @default(autoincrement())
  id_forum   Int
  id_user    Int
  id_creator Int
  comment    String   @db.VarChar(10000)
  created_at DateTime @default(now())
  user       User     @relation("fk_id_user_comment", fields: [id_user], references: [id])
  creator    User     @relation("fk_id_creator_comment", fields: [id_creator], references: [id])
  forum      Forum    @relation(fields: [id_forum], references: [id])
}

model File {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(500)
  type       String    @db.VarChar(25)
  size       Int
  url        String    @db.VarChar(1000)
  path       String    @db.VarChar(1000)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  user       User[]
  content    Content[]
}

model Redeem {
  id   Int          @id @default(autoincrement())
  name String       @db.VarChar(255)
  from String       @db.VarChar(255)
  coin Int
  user UserRedeem[]
}

model UserRedeem {
  user_id   Int
  redeem_id Int
  user      User   @relation(fields: [user_id], references: [id])
  redeem    Redeem @relation(fields: [redeem_id], references: [id])

  @@id([redeem_id, user_id])
}
